steps:
  # Download artifacts for web app, db, and IaC
  - download: current
    displayName: App Download
    artifact: dropApp
  - download: current
    displayName: Dacpac Download
    artifact: dropDacpac
  - download: current
    displayName: IaC Download
    artifact: dropIaC

  - task: replacetokens@3
    displayName: 'Replace Tokens with Variables'
    inputs:
      targetFiles: '$(Pipeline.Workspace)/dropARM/$(infraAsCodeFolder)/*.bicep'
      encoding: 'auto'
      writeBOM: true
      escapeType: 'none'
      actionOnMissing: 'fail'
      keepToken: false
      tokenPrefix: '__'
      tokenSuffix: '__'
      useLegacyPattern: false
      enableTelemetry: true

  - task: AzureCLI@2
    displayName: 'Preview Infrastructure changes' 
    condition: eq(variables['System.StageName'], 'dev')
    inputs:
      azureSubscription: $(serviceConnection)
      scriptLocation: 'inlineScript'
      scriptType: 'batch'
      inlineScript: |
        az deployment sub what-if --name "spacegamedeploy" --location "WestUS" --template-file "$(Pipeline.Workspace)\dropIaC\Tailspin.SpaceGame.Bicep\main.bicep"

  - task: AzureCLI@2
    displayName: 'Deploy Infrastructure' 
    condition: succeeded()
    inputs:
      azureSubscription: $(serviceConnection)
      scriptLocation: 'inlineScript'
      scriptType: 'batch'
      inlineScript: | 
        az deployment sub create --name "spacegamedeploy" --location "WestUS" --template-file "$(Pipeline.Workspace)\dropIaC\Tailspin.SpaceGame.Bicep\main.bicep"

  - task: SqlAzureDacpacDeployment@1
    displayName: Generate DB schema change script
    inputs:
      azureSubscription: '$(serviceConnection)'
      authenticationType: 'server'
      serverName: '$(sqlServerName).database.windows.net'
      databaseName: '$(dbname)'
      sqlUsername: '$(adminlogin)'
      sqlPassword: '$(adminPassword)'
      deployType: 'DacpacTask'
      deploymentAction: 'Script'
      dacpacFile: '$(Pipeline.Workspace)/dropDacpac/$(dbSchemaFolder)/bin/Debug/$(dbSchemaFolder).dacpac'
      ipDetectionMethod: 'AutoDetect'
    condition: succeeded()

  - task: PowerShell@2
    displayName: Show DB change script and check for schema changes
    inputs:
      targetType: 'inline'
      script: | 
        # Print the schema change script
        Write-Host "Auto Generated SQL Update Script:"
        Get-Content $(Build.SourcesDirectory)\GeneratedOutputFiles\$(dbname)_Script.sql | foreach {Write-Output $_}

        # Check for schema changes
        $file = Get-Content "$(Build.SourcesDirectory)\GeneratedOutputFiles\$(dbname)_Script.sql"
        $containsWord = $file | %{$_ -match "CREATE" -or $_ -match "ALTER" -or $_ -match "DROP"}
        if ($containsWord -contains $true) {
          Install-Module VSTeam -Scope CurrentUser -Force
          Set-VSTeamAccount â€“Account $(System.CollectionUri) -PersonalAccessToken $(PAT)
          $methodParameters = @{
            ProjectName = "$(System.TeamProject)"
            Name = "SpaceGame"}
          $vg = Get-VSTeamVariableGroup @methodParameters
          $vars = @{}
          $vg.variables | Get-Member -MemberType *Property | %{$vars.($_.Name) = $vg.variables.($_.Name)}
          $varName = "schemaChanged"
          $vars.$varName= @{}
          $vars.$varName.value = "True"
          $vars.$varName.isSecret = $false
          $methodParameters = @{
            id = $vg.id
            ProjectName = "$(System.TeamProject)"
            Name = "SpaceGame"
            Description = ""
            Type = "Vsts"
            Variables = $vars}
          Update-VSTeamVariableGroup @methodParameters}
    condition: succeeded()        

  - task: SqlAzureDacpacDeployment@1
    displayName: 'Deploy DB'
    inputs:
      azureSubscription: '$(serviceConnection)'
      authenticationType: 'server'
      serverName: '$(sqlServerName).database.windows.net'
      databaseName: '$(dbName)'
      sqlUsername: '$(adminlogin)'
      sqlPassword: '$(adminPassword)'
      deployType: 'DacpacTask'
      deploymentAction: 'Publish'
      dacpacFile: '$(Pipeline.Workspace)/dropDacpac/$(dbSchemaFolder)/bin/Debug/$(dbSchemaFolder).dacpac'
      ipDetectionMethod: 'AutoDetect'
    condition: succeeded()      

  - task: AzureWebApp@1
    displayName: 'Deploy app (no slot)'
    condition: and(succeeded(), eq(variables['System.StageName'], 'dev'))
    inputs:
      azureSubscription: '$(serviceConnection)'
      appName: '$(appservicename)'
      package: '$(Pipeline.Workspace)/dropApp/$(buildConfiguration)/*.zip'

  - task: AzureWebApp@1
    displayName: 'Deploy app to deploy slot'
    condition: and(succeeded(), ne(variables['System.StageName'], 'dev'))
    inputs:
      azureSubscription: '$(serviceConnection)'
      deployToSlotOrASE: 'true'
      slotName: 'swap'
      appName: '$(appservicename)'
      package: '$(Pipeline.Workspace)/dropApp/$(buildConfiguration)/*.zip' 

  - task: AzureAppServiceManage@0
    displayName: 'Swap deployment slots'
    condition: and(succeeded(), ne(variables['System.StageName'], 'dev'))  
    inputs:
      azureSubscription: '$(serviceConnection)'
      resourceGroupName: '$(resourceGroup)'
      webAppName: '$(appservicename)'
      sourceSlot: 'swap'
      targetSlot: 'production'
      action: 'Swap Slots'